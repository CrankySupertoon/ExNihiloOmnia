buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.21'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'kotlin'


version = "0.0.1"
group = "com.jozufozu.exnihiloomnia"
archivesBaseName = "exnihiloomnia"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = compileKotlin.kotlinOptions.jvmTarget = compileTestKotlin.kotlinOptions.jvmTarget = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20190719-1.14.3'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    jcenter()

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "modmaven.k-4u.nl"
    }

    maven { // TOP
        name = 'tterrag maven'
        url = "http://maven.tterrag.com/"
    }

    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }

    maven { //Albedo
        url = 'https://repo.elytradev.com/'
    }

    maven {
        url = "http://maven.shadowfacts.net/"
    }

    maven { url 'https://minecraft.curseforge.com/api/maven/' }
}

dependencies {
    minecraft "net.minecraftforge:forge:$mc_version-$forge_version"

    compile "kottle:Kottle:$kottle_version"

    // deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}"

    // deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:1.12-${top_version}"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "exnihiloomnia",
                "Specification-Vendor": "jozufozu",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"jozufozu",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar {
    archiveName = baseName + "_" + project.mc_version + "-" + project.version  + "." + extension

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveName = baseName + "_" + project.mc_version + "-" + project.version  + "-sources." + extension
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveName = baseName + "_" + project.mc_version + "-" + project.version  + "-deobf." + extension
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}
